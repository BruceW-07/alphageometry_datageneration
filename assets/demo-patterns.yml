

#angle_bisector:
#  - "{p0} is a point such that ∠{p1}{p2}{p0} = ∠{p0}{p2}{p3}. "
#  - "{p0} is a point such that ∠{p1}{p2}{p0} is equal to ∠{p0}{p2}{p3}. "
# Construct a point X on the angle bisector of ∠ABC
angle_bisector: # X A B C
  num_args: 4

  rules:
    point: [0]
    angle1: [1, 2, 0]
    angle2: [0, 2, 3]
    angle_full: {type: angle, args: [1, 2, 3]}
    bisector: {type: literal, args: ['bisector', 'angle bisector']}
    the: {type: literal, args: ['the', 'a']}
    angles: {type: conjunction, args: [angle1, angle2]}
    eqangles: {type: equality, args: [angle1, angle2]}

  templates:
    - "{point} is {the} {bisector} of {angle_full}"
    - "{point} bisects {angle_full}"

    - "{point} bisects {angles}"
    - "{angles} are bisected by {point}"

    - "{point} is on {the} {bisector} of {angles}"
    - "{point} is {the} {bisector} such that {eqangles}"

#angle_mirror:
#    - "{p0} is a point such that ∠{p1}{p2}{p3} = ∠{p3}{p2}{p0}. "
#    - "{p0} is a point such that ∠{p1}{p2}{p3} is equal to ∠{p3}{p2}{p0}. "
# Construct a point X such that BC is the bisector of ∠ABX
angle_mirror: # X A B C
  num_args: 4

  rules:
    point: [0]
    point_mirror: [1]
    line: [2, 3]
    angle1: [1, 2, 3]
    angle2: [3, 2, 0]
    angle_full: [1, 2, 0]
    angles: {type: conjunction, args: [angle1, angle2]}
    eqangles: {type: equality, args: [angle1, angle2]}

  templates:
    - "{point} is reflected across {line}"
    - "{point} is the mirror image of {point_mirror} across {line}"

    - "{line} is the bisector of {angle_full}"
    - "{point} is a point such that {eqangles}"

#circle:
#    - "{p0} is the centre of the circle that passes through {p1}, {p2}, {p3}. "
# Construct a point X as the circumcenter of A, B, C
circle: # X A B C
  num_args: 4

  rules:
      point: [0]
      triangle: [1, 2, 3]
      circle: [0, 1, 2, 3]
      points: {type: conjunction, args: [p1, p2, p3]}
      corners: {type: ref, args: [points, triangle]}
      passing: {type: literal, args: ['that passes through', 'passing through']}

  templates:
#      - "{point} is the circumcenter of {corners}"
      - "{point} is the center of the circle {passing} {points}"
      - "the center of the circle {passing} {points} is {point}"
      - "{point} is the center of {circle}"

#circumcenter:
#    - "{p0} is the centre of the circumcenter of the triangle {p1}{p2}{p3}. "
#
circumcenter:
    num_args: 4

    rules:
        point: [0]
        triangle: [1, 2, 3]
        points: {type: conjunction, args: [p1, p2, p3]}
        corners: {type: ref, args: [points, triangle]}

    templates:
      - "{point} is the circumcenter of {corners}"

#eq_quadrangle:
#    - "{p0}{p1}{p2}{p3} is a quadrilateral with {p0}{p3} = {p1}{p2}. "
# Construct quadrilateral ABCD such that AB = CD
eq_quadrilateral: # A B C D
  num_args: 4

  rules:
    quadrilateral: [0, 1, 2, 3]
    line1: [0, 3]
    line2: [1, 2]
    corners: {type: ord-conjunction, args: [p0, p1, p2, p3]}
    eqsides: {type: equality, args: [line1, line2]}
    where: {type: literal, args: ['with', 'such that', 'where']}
    desc: {type: ref, args: [quadrilateral, corners]}

  templates:
    - "{desc} is a quadrilateral {where} {eqsides}"
    - "{corners} forms a quadrilateral {where} {eqsides}"

#eq_trapezoid:
#    - "{p0}{p1}{p2}{p3} is an isosceles trapezoid with {p3}{p0} = {p1}{p2}. "
# Construct trapezoid ABCD such that AD = BC
eq_trapezoid: # A B C D
  num_args: 4

  rules:
    trapezoid: [0, 1, 2, 3]
    line1: [0, 3]
    line2: [1, 2]
    corners: {type: ord-conjunction, args: [p0, p1, p2, p3]}
    eqsides: {type: equality, args: [line1, line2]}
    where: {type: literal, args: ['with', 'such that', 'where']}
    desc: {type: ref, args: [trapezoid, corners]}

  templates:
    - "{desc} is a trapezoid {where} {eqsides}"
    - "{corners} forms a trapezoid {where} {eqsides}"

#eq_triangle:
#    - "{p0}{p1}{p2} is an equilateral triangle. "
# Construct an equilateral triangle ABC
eq_triangle: # A B C
  num_args: 3

  rules:
    triangle: [0, 1, 2]
    points: {type: conjunction, args: [p0, p1, p2]}
    line1: [0, 1]
    line2: [1, 2]
    line3: [2, 0]
    eqsides: {type: equality, args: [line1, line2, line3]}
    where: {type: literal, args: ['with', 'such that', 'where']}
    desc: {type: ref, args: [triangle, points]}
    sides: {type: literal, args: ['angles', 'sides']}
    equilateral: {type: literal, args: ['equilateral', 'an equilateral', 'an equilateral triangle']}
    prep: {type: literal, args: ['for', 'in']}
    allof: {type: literal, args: ['all', 'each of the', 'the']}
    equal: {type: literal, args: ['equal', 'congruent', 'equivalent']}

  templates:
    - "{desc} is {equilateral}"
    - "{points} forms an equilateral triangle"
    - "{prep} {triangle}, {allof} {sides} are {equal}"
    - "{allof} {sides} of {triangle} are {equal}"
    - "{prep} {triangle}, {eqsides}"
    - "{eqsides} {prep} {triangle}"

#eqangle2:
#    - "{p0} is a point such that ∠{p2}{p1}{p0} = ∠{p0}{p3}{p2}. "
# Construct a point X such that ∠BAX = ∠XCB
eq_angle: # X A B C
  num_args: 4

  rules:
    point: [0]
    angle1: [2, 1, 0]
    angle2: [0, 3, 2]
    eqangles: {type: equality, args: [angle1, angle2]}
    where: {type: literal, args: ['such that', 'where']}

  templates:
    - "{point} is a point {where} {eqangles}"

#eqdia_quadrangle:
#    - "{p0}{p1}{p2}{p3} is a quadrilateral whose diagonals are equal. "
# Construct a quadrilateral ABCD such that AC = BD
eqdia_quadangle: # A B C D
  num_args: 4

  rules:
    quadrilateral: [0, 1, 2, 3]
    line1: [0, 2]
    line2: [1, 3]
    corners: {type: ord-conjunction, args: [p0, p1, p2, p3]}
    prep: {type: literal, args: ['for', 'in']}
    equal: {type: literal, args: ['equal', 'congruent', 'equivalent']}
    diags: {type: conjunction, args: [line1, line2]}
    eqdiags: {type: equality, args: [line1, line2]}
    where: {type: literal, args: ['such that', 'where']}
    desc: {type: ref, args: [quadrilateral, corners]}

  templates:
    - "{prep} {quadrilateral}, {eqdiags}"
    - "{desc} is a quadrilateral {where} {eqdiags}"
    - "{corners} forms a quadrilateral {where} {eqdiags}"
    - "{diags} are {equal} in {quadrilateral}"
    - "the diagonals of {quadrilateral} are {equal}"
    - "{quadrilateral} has {equal} diagonals"

#eqdistance:
#    - "{p0} is a point such that {p0}{p1} = {p2}{p3}. "
# Construct a point X such that XA = BC
eq_distance: # X A B C
  num_args: 4

  rules:
    point: [0]
    line1: [0, 1]
    line2: [2, 3]
    eqlines: {type: equality, args: [line1, line2]}
    lines: {type: conjunction, args: [line1, line2]}
    where: {type: literal, args: ['such that', 'where']}
    equal: {type: literal, args: ['equal', 'congruent', 'equivalent']}

  templates:
    - "{point} is a point {where} {eqlines}"
    - "{lines} are {equal}"
    - "{eqlines}"

#foot:
#    - "{p0} is the foot of the perpendicular dropped on to {p2}{p3} from {p1}. "
# Construct X as the foot of A on BC
foot: # X A B C
  num_args: 4

  rules:
    point: [0]
    point_foot: [1]
    line: [2, 3]
    line_perp: [0, 1]
    where: {type: literal, args: ['of the perpendicular dropped on to', 'from']}

  templates:
    - "{point} is the foot of {point_foot} on {line}"
    - "{point} is on {line} and {line_perp} is perpendicular to {line}"
    - "the foot of {point_foot} on {line} is {point}"

#incenter:
#    - "{p0} is is the incentre of triangle {p1}{p2}{p3}. "
# Construct a point X as the incenter of ABC
incenter: # X A B C
  num_args: 4

  rules:
    point: [0]
    triangle: [1, 2, 3]
    points: {type: conjunction, args: [p1, p2, p3]}
    desc: {type: ref, args: [points, triangle]}
    the: {type: literal, args: ['the', 'the point of']}
    meet: {type: literal, args: ['intersection of the angle bisectors', 'concurrence of the angle bisectors',
                                 'meeting point of the angle bisectors']}
    loc: {type: literal, args: ['is', 'is located at', 'is at']}

  templates:
    - "{point} {loc} the incenter of {desc}"
    - "{triangle} has incenter {point}"
    - "the incenter of {triangle} {loc} {point}"
    - "{point} {loc} {the} {meet} of {triangle}"

##incenter2: # TODO(Partha): opportunity to augment! Symantic!  Also use respectively!
##    - "{p3} is is the incentre of triangle {p4}{p5}{p6}. The incircle touches the arm {p4}{p5} at {p2}, the arm {p5}{p6} at {p0} and the arm {p6}{p4} at {p1}. "
#incenter2: # X Y Z I A B C
#    num_args: 7
#
#    rules:
#        point: [3]
#        triangle: [4, 5, 6]
#        points: {type: ord-conjunction, args: [p4, p5, p6]}
#        desc: {type: ref, args: [points, triangle]}
#        the: {type: literal, args: ['the', 'the point of']}
#        meet: {type: literal, args: ['intersection of the angle bisectors', 'concurrence of the angle bisectors',
#                                     'meeting point of the angle bisectors']}
#        loc: {type: literal, args: ['is', 'is located at', 'is at']}
#        incircle: {type: literal, args: ['incircle', 'the incircle']}
#        touches: {type: literal, args: ['touches', 'intersects', 'meets']}
#        line1: [4, 5]
#        line2: [5, 6]
#        line3: [6, 4]
#        touchpoints: {type: ord-conjunction, args: [p0, p1, p2]}
#
#    templates:
#      - "{point} {loc} the incenter of {desc} with touchpoints {touchpoints}"
#      - "{triangle} has incenter {point} and touchpoints {touchpoints}"

incenter2:
  num_args: 7
  templates:
    - "{p3} is the incenter of triangle {p4}{p5}{p6}. The incircle touches the arm {p4}{p5} at {p2}, the arm {p5}{p6} at {p0} and the arm {p6}{p4} at {p1}"
excenter:
  num_args: 4
  templates:
    - "{p0} is the excenter of triangle {p1}{p2}{p3} opposite to the angle {p2}{p1}{p3}"
excenter2:
  num_args: 7
  templates:
    - "{p3} is the excenter of triangle {p4}{p5}{p6} opposite to the angle {p5}{p4}{p6}. The excircle touches the arm {p4}{p5} at {p2}, the arm {p5}{p6} at {p0} and the arm {p6}{p4} at {p1}"
centroid:
  num_args: 7
  templates:
    - "{p4}{p5}{p6} is a triangle. {p3} is the centroid of the triangle and {p0}, {p1}, {p2} are the midpoints of the sides {p5}{p6}, {p4}{p6}, {p5}{p4} respectively"
ninepoints:
  num_args: 7
  templates:
    - "{p4}{p5}{p6} is a triangle. {p0}, {p1}, {p2} are the midpoints of the sides {p5}{p6}, {p4}{p6}, {p5}{p4} respectively. {p3} is the centre of the circumcircle of the triangle {p0}{p1}{p2}"
intersection_cc:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a quadrilateral where {p1}{p3} = {p1}{p0} and {p2}{p3} = {p2}{p0}"
intersection_lc:
  num_args: 4
  templates:
    - "{p1}{p2}{p3} is a triangle. The circle drawn with the centre at {p2} and passing through {p3} intersects the (possibly extended) line {p1}{p3} again at point {p0}"
intersection_ll:
  num_args: 5
  templates:
    - "Line {p1}{p2} and line {p3}{p4} intersect each other at {p0}"
intersection_lp:
  num_args: 6
  templates:
    - "{p4}{p5} and {p1}{p2}  are two non parallel lines. {p0} lies on {p1}{p2} but not on {p4}{p5} such that {p3}{p0} is parallel to {p4}{p5}"
intersection_lt:
  num_args: 6
  templates:
    - "{p1}{p2} and {p4}{p5} are two non perpendicular lines. Line {p0}{p3} is perpendicular to {p4}{p5} it intersects line {p1}{p2} at {p0}"
intersection_pp:
  num_args: 7
  templates:
    - "Line {p0}{p1} and line {p2}{p3} are parallel. Line {p4}{p0} and line {p5}{p6} are parallel. {p0} is the intersection point"
intersection_tt:
  num_args: 7
  templates:
    - "{p2}{p3} and {p5}{p6} are two non parallel lines. {p0}{p1} and {p0}{p4} are perpendicular lines to the aforementioned lines respectively. The Perpendicular lines intersect at {p0}"
iso_triangle:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is an isosceles triangle with base {p1}{p2}"
    - "{p0}{p1}{p2} is an isosceles triangle with {p0}{p1} = {p0}{p2}"
lc_tangent:
  num_args: 3
  templates:
    - "{p0}{p1} is the tangent to the circle centered on {p1}{p2} (possibly extended) and passing through {p1}"
    - "{p0}{p1} is perpendicular to {p1}{p2}"
midpoint:
  num_args: 3
  templates:
    - "{p0} is the midpoint of {p1}{p2}"
mirror:
  num_args: 3
  templates:
    - "{p0} is the mirror image of {p1} in {p2}"
nsquare:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is an isosceles right angle triangle with ∠{p0}{p1}{p2} being the right angle"
on_aline:
  num_args: 6
  templates:
    - "{p0} is a point such that ∠{p0}{p1}{p2} = ∠{p3}{p4}{p5}"
on_aline2:
  num_args: 6
  templates:
    - "{p0} is a point such that ∠{p1}{p0}{p2} = ∠{p3}{p4}{p5}"
on_bline:
  num_args: 3
  templates:
    - "{p0} lies on the perpendicular bisector of {p1}{p2}"
on_circle:
  num_args: 3
  templates:
    - "{p0} lies on the circle centered are {p1} with radios {p1}{p2}"
on_line:
  num_args: 3
  templates:
    - "{p0} lies on line {p1}{p2}"

on_pline:
  num_args: 4
  templates:
    - "{p0} is on the line passing through {p1} and parallel to {p2}{p3}"
on_tline:
  num_args: 4
  templates:
    - "{p0} is a point such that {p0}{p1} is perpendicular to {p1}{p2}"
    - "{p0} lies on the perpendicular line to {p2}{p3} at {p1}"
orthocenter:
  num_args: 4
  templates:
    - "{p0} is the orthocenter of triangle {p1}{p2}{p3}"
parallelogram:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a parallelogram"
pentagon:
  num_args: 5
  templates:
    - "{p0}{p1}{p2}{p3}{p4} is a pentagon"
psquare:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is an isosceles right angle triangle with ∠{p0}{p1}{p2} being the right angle"
quadangle:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a quadrangle"
    - "{p0}{p1}{p2}{p3} is a quadrilateral"
r_trapezoid:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a right angle trapezoid. With {p0}{p1} ⊥ {p0}{p3}"
r_triangle:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is a triangle. With ∠{p1}{p0}{p2} being a right angle"
rectangle:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a rectangle"
reflect:
  num_args: 4
  templates:
    - "{p0} is the reflection of {p1} on {p2}{p3}"
risos:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is a right angle isosceles triangle. With ∠{p1}{p0}{p2} as the right angle"
s_angle:
  num_args: 3
  templates:
    - "∠{p0}{p1}{p2} is {p2} degree"
shift:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is a triangle"
square:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a square"
isquare:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a square"
trapazoid:
  num_args: 4
  templates:
    - "{p0}{p1}{p2}{p3} is a trapezoid"
triangle:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is a triangle"
triangle12:
  num_args: 3
  templates:
    - "{p0}{p1}{p2} is a triangle. With {p0}{p1} : {p0}{p2} = 1 : 2"
2l1c:
  num_args: 8
  templates:
    - "{p4}{p6} is a line {p5}{p6} is another line. A circle centered at {p7} passes through {p4} and touches {p5}. A circle centered at {p3} touches {p4}{p6} at {p0}, {p5}{p7} at {p1} and the circle centered at {p7} at {p2}"
e5128:
  num_args: 6
  templates:
    - "{p3}{p0}{p5} are points on a circle centered at {p4}. {p2}{p3} is tangent to the circle at {p3}. The line {p0}{p5} intersects {p2}{p3} at {p1}"





