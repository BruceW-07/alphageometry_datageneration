



In the mystical world of your game, the function f(x, y) can be envisioned as a powerful spell cast by a wizard to manipulate the forces of nature. When invoked, the wizard channels the elemental gem x and the ethereal potion y through his staff. If the potion's essence is nearly depleted (y is zero), a tiny drop of dragon's blood is added to amplify its power, weaving a complex tapestry of magical flux that alters reality in unexpected ways, guided by the arcane formula.



###################

I need a `unnest_expression` python function which is given a nested expression (as a str) and transforms that into a sequence of statements each of which creates an intermediate variable to assign a constant or calls a single function.
The function should return a list of tuples in the form tuple[Optional[str], Optional[str], Union[int, list[str]]] referring to: (variable_name, function_call, value or arguments).

The `unnest_expression` should use the AST of the expression to make sure the semantics are respected. The function should be able to handle nested expressions with any number of arguments and nested calls.

For example, unnest_expression("f(g(1), h(2))") should return:

[('v0', None, 1), ('v1', 'g', ['v0']), ('v2', None, 2), ('v3', 'h', ['v2']), (None, 'f', ['v1', 'v3'])]

Or the unnest_expression("f(g(h(x), y))") should return:

[('v0', None, 'x'), ('v1', 'h', ['v0']), ('v2', None, 'y'), ('v3', 'g', ['v1', 'v2']), (None, 'f', ['v3'])]

Verify your solution using several challenging unit tests using `pytest`.

Take a deep breath and think step-by-step how you would solve this problem. No yapping.


