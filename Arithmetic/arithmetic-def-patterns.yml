calcination: # z = add(x, y)
  args: [ingredient1, ingredient2]

  rules:
    heats: {type: literal, args: ['heats', 'warms', 'ignites', 'scorches', 'kindles', 'bakes', 'fires', 'blazes', 'glows', 'flames', 'chars']}
    remove: {type: literal, args: ['remove', 'extract', 'purify', 'cleanse', 'filter', 'distill', 'separate', 'extract', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean']}
    reduce: {type: literal, args: ['reduce', 'diminish', 'lessen', 'shrink', 'minimize', 'decrease', 'lower', 'weaken', 'dilute', 'attenuate', 'moderate', 'mitigate', 'abate', 'soften', 'temper', 'allay', 'alleviate', 'assuage', 'palliate', 'relieve', 'soothe', 'mollify', 'calm', 'pacify', 'tranquilize', 'quieten', 'quiet', 'silence', 'hush', 'muffle', 'mute', 'dampen', 'dull', 'deaden', 'numb', 'blunt', 'benumb', 'anaesthetize', 'anaesthetise']}
    and: {type: literal, args: ['and', 'with', 'along with', 'together with', 'combined with', 'in conjunction with', 'in combination with', 'as well as',]}
    impurities: {type: literal, args: ['contaminants', 'pollutants', 'adulterants', 'toxins', 'residues', 'impurities', 'contaminations', 'defilements', 'sediments', 'dross', 'taints', 'debris']}
    alchemist: {type: literal, args: ['alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress']}

  templates:
    - "The {alchemist} {heats} {ingredient1} {and} {ingredient2} to {remove} all {impurities} and {reduce} them to {out}."

dissolution: # z = subtract(x, y)
  args: [element1, element2]

  rules:
    alchemist: {type: literal, args: ['alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    dissolves: {type: literal, args: ['dissolves', 'melts', 'liquefies', 'thaws', 'defrosts', 'unfreezes', 'deliquesces', 'fluxes', 'fuses', 'liquefies', 'thaws', 'defrosts', 'unfreezes', 'deliquesces', 'fluxes', 'fuses']}
    water: {type: literal, args: ['water', 'aqua', 'H2O', 'hydrogen oxide', 'dihydrogen monoxide', 'dihydrogen oxide', 'hydrogen hydroxide', 'hydroxic acid', 'hydrogen hydroxide', 'hydroxic acid']}
    and: {type: literal, args: ['and', 'with', 'along with', 'together with', 'combined with', 'in conjunction with', 'in combination with', 'as well as',]}
    separate: {type: literal, args: ['separate', 'divide', 'split', 'part', 'partition', 'section', 'segment', 'dissect', 'disunite', 'disjoin', 'disconnect', 'detach', 'disengage', 'disentangle', 'disentwine', 'disarticulate', 'disassemble', 'disband', 'disperse', 'distribute', 'dispense', 'deal', 'apportion', 'allocate', 'assign', 'allot', 'portion', 'parcel', 'partition', 'section', 'segment', 'dissect', 'disunite', 'disjoin', 'disconnect', 'detach', 'disengage', 'disentangle', 'disentwine', 'disarticulate', 'disassemble', 'disband', 'disperse', 'distribute', 'dispense', 'deal', 'apportion', 'allocate', 'assign', 'allot', 'portion', 'parcel']}
    soluble: {type: literal, args: ['soluble', 'dissolvable', 'dissoluble', 'solvable',]}
    components: {type: literal, args: ['components', 'parts', 'elements', 'constituents', 'ingredients', 'factors', 'pieces', 'segments', 'units']}
  templates:
    - "The {alchemist} {dissolves} {element1} {and} {element2} in {water} to {separate} the {soluble} {components}, and gets {out}."


separation: # z = multiply(x, y)
  args: [element1, element2]
#  kinds: [ingredient, ingredient]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    filters: { type: literal, args: [ 'filters', 'strains', 'sieves', 'sifts', 'screens', 'clarifies', 'refines', 'purifies', 'cleanses', 'distills', 'refines', 'clarifies', 'distills', 'filters', 'strains', 'sifts', 'screens', 'clarifies', 'refines', 'purifies', 'cleanses', 'distills', 'refines', 'clarifies', 'distills' ]}
    mixture: { type: literal, args: [ 'mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation' ]}
    dissolved: { type: literal, args: [ 'dissolved', 'liquefied', 'melted', 'thawed', 'defrosted', 'unfrozen', 'deliquesced', 'fluxed', 'fused', 'liquefied', 'thawed', 'defrosted', 'unfrozen', 'deliquesced', 'fluxed', 'fused' ]}
    isolate: { type: literal, args: [ 'isolate', 'separate', 'extract', 'purify', 'cleanse', 'filter', 'distill', 'separate', 'extract', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean' ]}
    refined: { type: literal, args: [ 'refined', 'purified', 'cleaned', 'filtered', 'distilled', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned' ]}
    substances: { type: literal, args: [ 'substances', 'elements', 'compounds', 'blends', 'combinations', 'concoctions', 'solutions', 'emulsions', 'tinctures', 'solutions', 'distillations' ]}
    impurities: { type: literal, args: [ 'contaminants', 'pollutants', 'adulterants', 'toxins', 'residues', 'impurities', 'contaminations', 'defilements', 'sediments', 'dross', 'taints', 'debris' ] }
    obtaining: { type: literal, args: [ 'obtaining', 'acquiring', 'gaining', 'receiving', 'procuring', 'securing', 'attaining', 'achieving', 'earning', 'winning', 'getting', 'fetching']}

  templates:
    - "The {alchemist} {filters} a {mixture} of {dissolved} {element1} and {element2} to {isolate} the {refined} {substances} from {impurities} {obtaining} {out}."


conjunction: # z = divide(x, y)
  args: [element1, element2]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    combines: { type: literal, args: [ 'combines', 'unites', 'joins', 'merges', 'fuses', 'blends', 'mixes', 'melds', 'amalgamates', 'integrates', 'incorporates', 'intermixes', 'intermingles', 'interweaves', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits' ]}
    isolated: { type: literal, args: [ 'isolated', 'separated', 'extracted', 'purified', 'cleansed', 'filtered', 'distilled', 'separated', 'extracted', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned' ]}
    elements: { type: literal, args: [ 'elements', 'substances', 'compounds', 'blends', 'combinations', 'concoctions', 'solutions', 'emulsions', 'tinctures', 'solutions', 'distillations' ]}
    and: {type: literal, args: ['and', 'with', 'along with', 'together with', 'combined with', 'in conjunction with', 'in combination with', 'as well as',]}
    unified: { type: literal, args: [ 'unified', 'merged', 'fused', 'blended', 'mixed', 'melded', 'amalgamated', 'integrated', 'incorporated', 'intermixed', 'intermingled', 'interwove', 'interlaced', 'interconnected', 'interlocked', 'intermeshed', 'interwound', 'interwreathed', 'interknit', 'interlaced', 'interconnected', 'interlocked', 'intermeshed', 'interwound', 'interwreathed', 'interknit' ]}
    whole: { type: literal, args: [ 'whole', 'entirety', 'totality', 'sum', 'aggregate', 'unity', 'oneness', 'singularity', 'wholeness', 'completeness', 'sum', 'aggregate', ]}
  templates:
    - "The {alchemist} {combines} the {isolated} {elements} of {element1} {and} {element2} into a new {unified} {whole}, {out}."


fermentation: # w = (x + 3y) / (z - 4), explodes when Z = 4 so potentially explosive
  args: [essence_x, essence_y, essence_z]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    introduces: { type: literal, args: [ 'introduces', 'adds', 'incorporates', 'injects', 'instills', 'infuses', 'mixes', 'blends', 'combines', 'unites', 'joins', 'merges', 'fuses', 'blends', 'mixes', 'melds', 'amalgamates', 'integrates', 'incorporates', 'intermixes', 'intermingles', 'interweaves', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits', 'interlaces', 'interconnects']}
    mixture: { type: literal, args: [ 'mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'distillation' ]}
    spark: { type: literal, args: [ 'spark', 'ignite', 'trigger', 'activate', 'initiate', 'set off', 'kindle', ]}
    vital: { type: literal, args: [ 'vital', 'essential', 'crucial', 'necessary', 'indispensable', 'important', 'key', 'pivotal', 'fundamental', 'basic', 'primary', 'principal', 'chief', 'main', 'major', 'central', 'cardinal', 'dominant', 'prime', 'paramount', 'preeminent', 'supreme', 'overriding', 'overarching', 'ultimate', 'utmost', 'highest', 'top', 'first', 'foremost', 'leading', 'principal', 'chief', 'main', 'major', 'central', 'cardinal', 'dominant', 'prime', 'paramount', 'preeminent', 'supreme', 'overriding', 'overarching', 'ultimate', 'utmost', 'highest', 'top', 'first', 'foremost', 'leading' ]}
    transformation: { type: literal, args: [ 'transformation', 'change', 'alteration', 'conversion']}
    yielding: { type: literal, args: [ 'yielding', 'producing', 'generating', 'giving', 'creating', 'making', 'manufacturing', 'fabricating', 'fashioning', 'forming']}

  templates:
    - "The {alchemist} {introduces} {essence_x} into a {mixture} of {essence_y} and {essence_z} to {spark} a {vital} {transformation}, {yielding} {out}."
