calcination: # z = add(x, y)
  args: [ingredient1, ingredient2]

  rules:
    heats: {type: literal, args: ['heats', 'warms', 'ignites', 'scorches', 'kindles', 'bakes', 'fires', 'blazes', 'glows', 'flames', 'chars']}
    heating: {type: literal, args: ['heating', 'warming', 'igniting', 'scorching', 'kindling', 'baking', 'firing', 'blazing', 'glowing', 'flaming', 'charring']}
    leaving: {type: literal, args: ['leaving', 'obtaining', 'acquiring', 'gaining', 'receiving', 'procuring', 'securing', 'attaining', 'achieving', 'earning', 'winning', 'getting', 'fetching']}
    mixture: {type: literal, args: ['mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'tincture']}
    process: {type: literal, args: ['process', 'procedure', 'method', 'technique', 'operation', 'system', 'approach', 'way', 'means']}
    involves: {type: literal, args: ['involves', 'requires', 'necessitates', 'demands', 'entails', 'needs', 'compels', 'obliges', 'forces', 'imposes', 'dictates', 'enforces', 'constrains', 'presses', 'drives', 'coerces', 'pushes', 'urges', 'compels', 'obliges', 'forces', 'imposes', 'dictates', 'enforces', 'constrains', 'presses', 'drives', 'coerces', 'pushes', 'urges']}
    remove: {type: literal, args: ['remove', 'extract', 'purify', 'cleanse', 'filter', 'distill', 'separate', 'extract', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean']}
    reduce: {type: literal, args: ['reduce', 'diminish', 'lessen', 'shrink', 'minimize', 'decrease', 'lower', 'weaken', 'dilute', 'attenuate', 'moderate', 'mitigate', 'abate', 'soften', 'temper', 'allay', 'alleviate', 'assuage', 'palliate', 'relieve', 'soothe', 'mollify', 'calm', 'pacify', 'tranquilize', 'quieten', 'quiet', 'silence', 'hush', 'muffle', 'mute', 'dampen', 'dull', 'deaden', 'numb', 'blunt', 'benumb', 'anaesthetize', 'anaesthetise']}
    and: {type: literal, args: ['and', 'with', 'along with', 'together with', 'combined with', 'in conjunction with', 'in combination with', 'as well as',]}
    obtain: {type: literal, args: ['obtain', 'acquire', 'gain', 'receive', 'procure', 'secure', 'attain', 'achieve', 'earn', 'win', 'get', 'fetch']}
    obtaining: { type: literal, args: [ 'obtaining', 'acquiring', 'gaining', 'receiving', 'procuring', 'securing', 'attaining', 'achieving', 'earning', 'winning', 'getting', 'fetching']}
    cleanse: {type: literal, args: ['cleanse', 'purify', 'filter', 'distill', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean']}
    impurities: {type: literal, args: ['contaminants', 'pollutants', 'adulterants', 'toxins', 'residues', 'impurities', 'contaminations', 'defilements', 'sediments', 'dross', 'taints', 'debris']}
    alchemist: {type: literal, args: ['alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress']}
    fired: {type: literal, args: ['fired', 'ignited', 'scorched', 'kindled', 'baked', 'flamed', 'charred']}
    result_in: {type: literal, args: ['result in', 'yield', 'produce', 'generate', 'create', 'make', 'manufacture', 'fabricate', 'form', 'bring about', 'bring forth','give rise to', 'give birth to', 'give birth']}
    heat: {type: literal, args: ['heat', 'fire', 'temperature',]}
    high: {type: literal, args: ['high', 'intense', 'extreme', 'searing', 'scorching', 'blazing', 'burning', 'fierce', 'fiery', 'scalding', 'torrid', 'boiling', 'roasting', 'baking', 'broiling',]}
  templates:
    - "The {alchemist} {heats} {ingredient1} {and} {ingredient2} to {remove} all {impurities} and {reduce} them to {out}."
    - "By {heating} {ingredient1} and {ingredient2}, the {alchemist} {remove}s {impurities}, {leaving} {out}."
    - "A {mixture} of {ingredient1} and {ingredient2} is scorched by the {alchemist} to extract {out}."
    - "The {process} {involves} the {alchemist} baking {ingredient1} with {ingredient2} to {cleanse} and {obtain} {out}."
    - "{ingredient1} {and} {ingredient2}, when {fired} by the {alchemist}, {result_in} {out} after purging {impurities}."
    - "Using {high} {heat}, the {alchemist} chars {ingredient1} and {ingredient2} to achieve {out}."
    - "The {alchemist} blazes {ingredient1} and {ingredient2} to eradicate all {impurities} for {out}."
    - "To prepare {out}, {ingredient1} and {ingredient2} are kindled until {impurities} vanish."
    - "The {alchemist} employs flames to convert {ingredient1} and {ingredient2} into {out}."
    - "With intense heat, the {alchemist} reduces {ingredient1} and {ingredient2} to their essence, {obtaining} {out}."

dissolution: # z = subtract(x, y)
  args: [element1, element2]

  rules:
    alchemist: {type: literal, args: ['alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    dissolves: {type: literal, args: ['dissolves', 'melts', 'liquefies', 'thaws', 'defrosts', 'unfreezes', 'deliquesces', 'fluxes', 'fuses', 'liquefies', 'thaws', 'defrosts', 'unfreezes', 'deliquesces', 'fluxes', 'fuses']}
    water: {type: literal, args: ['water', 'aqua', 'H2O', 'hydrogen oxide', 'dihydrogen monoxide', 'dihydrogen oxide', 'hydrogen hydroxide', 'hydroxic acid', 'hydrogen hydroxide', 'hydroxic acid']}
    and: {type: literal, args: ['and', 'with', 'along with', 'together with', 'combined with', 'in conjunction with', 'in combination with', 'as well as',]}
    separate: {type: literal, args: ['separate', 'divide', 'split', 'part', 'partition', 'section', 'segment', 'dissect', 'disunite', 'disjoin', 'disconnect', 'detach', 'disengage', 'disentangle', 'disentwine', 'disarticulate', 'disassemble', 'disband', 'disperse', 'distribute', 'dispense', 'deal', 'apportion', 'allocate', 'assign', 'allot', 'portion', 'parcel', 'partition', 'section', 'segment', 'dissect', 'disunite', 'disjoin', 'disconnect', 'detach', 'disengage', 'disentangle', 'disentwine', 'disarticulate', 'disassemble', 'disband', 'disperse', 'distribute', 'dispense', 'deal', 'apportion', 'allocate', 'assign', 'allot', 'portion', 'parcel']}
    soluble: {type: literal, args: ['soluble', 'dissolvable', 'dissoluble', 'solvable',]}
    components: {type: literal, args: ['components', 'parts', 'elements', 'constituents', 'ingredients', 'factors', 'pieces', 'segments', 'units']}
    dissolved: { type: literal, args: [ 'dissolved', 'liquefied', 'melted', 'thawed', 'defrosted', 'unfrozen', 'deliquesced', 'fluxed', 'fused', 'liquefied', 'thawed', 'defrosted', 'unfrozen', 'deliquesced', 'fluxed', 'fused' ] }

  templates:
    - "The {alchemist} {dissolves} {element1} {and} {element2} in {water} to {separate} the {soluble} {components}, and gets {out}."
    # TODO: Is there enough distinction between dissolution and separation? Look at hte disolve keyword
    - "{element1} and {element2} are {dissolved} by the {alchemist} in {water}, separating the {soluble} parts to produce {out}."
    - "The {alchemist} places {element1} and {element2} in {water}, aiming to get {out} by separating soluble {components}."
    - "A solution of {element1} and {element2} in {water} helps the {alchemist} to divide and retrieve {out}."
    - "Through dissolving {element1} with {element2} in {water}, the {alchemist} extracts {out}."
    - "In {water}, {element1} and {element2} undergo dissolution by the {alchemist}, yielding {out}."
    - "The process by the {alchemist} involves {element1} and {element2} in water to extract {out} efficiently."
    - "{element1} and {element2}, when immersed in {water} by the {alchemist}, result in {out}."
    - "The {alchemist} separates soluble {components} from {element1} and {element2} in {water}, procuring {out}."
    - "Water serves as a medium for the {alchemist} to dissolve {element1} and {element2}, aiming to isolate {out}."


separation: # z = multiply(x, y)
  args: [element1, element2]
#  kinds: [ingredient, ingredient]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    filters: { type: literal, args: [ 'filters', 'strains', 'sieves', 'sifts', 'screens', 'clarifies', 'refines', 'purifies', 'cleanses', 'distills', 'refines', 'clarifies', 'distills', 'filters', 'strains', 'sifts', 'screens', 'clarifies', 'refines', 'purifies', 'cleanses', 'distills', 'refines', 'clarifies', 'distills' ]}
    mixture: { type: literal, args: [ 'mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation' ]}
    dissolved: { type: literal, args: [ 'dissolved', 'liquefied', 'melted', 'thawed', 'defrosted', 'unfrozen', 'deliquesced', 'fluxed', 'fused', 'liquefied', 'thawed', 'defrosted', 'unfrozen', 'deliquesced', 'fluxed', 'fused' ]}
    isolate: { type: literal, args: [ 'isolate', 'separate', 'extract', 'purify', 'cleanse', 'filter', 'distill', 'separate', 'extract', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean', 'refine', 'clarify', 'distill', 'filter', 'strain', 'sift', 'strain', 'clean' ]}
    refined: { type: literal, args: [ 'refined', 'purified', 'cleaned', 'filtered', 'distilled', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned' ]}
    substances: { type: literal, args: [ 'substances', 'elements', 'compounds', 'blends', 'combinations', 'concoctions', 'solutions', 'emulsions', 'tinctures', 'solutions', 'distillations' ]}
    impurities: { type: literal, args: [ 'contaminants', 'pollutants', 'adulterants', 'toxins', 'residues', 'impurities', 'contaminations', 'defilements', 'sediments', 'dross', 'taints', 'debris' ] }
    obtaining: { type: literal, args: [ 'obtaining', 'acquiring', 'gaining', 'receiving', 'procuring', 'securing', 'attaining', 'achieving', 'earning', 'winning', 'getting', 'fetching']}

  templates:
    - "The {alchemist} {filters} a {mixture} of {dissolved} {element1} and {element2} to {isolate} the {refined} {substances} from {impurities} {obtaining} {out}."
    - "The {alchemist} isolates refined {substances} from a mixture of {element1} and {element2}, securing {out}."
    - "To obtain {out}, the {alchemist} separates {element1} and {element2} from other {impurities}."
    - "{element1} and {element2}, once {dissolved}, are filtered by the {alchemist} to collect {out}."
    - "Using filtration, the {alchemist} derives {out} from a blend of {element1} and {element2}."
    - "The {alchemist} refines {element1} and {element2} to extract {out} from mixed {impurities}."
    - "To achieve {out}, the {alchemist} processes a solution of {element1} and {element2} to remove {impurities}."
    - "The {alchemist} employs a technique to filter out {impurities}, leaving {element1} and {element2} as {out}."
    - "A refined {out} is the result of the {alchemist}'s effort to separate {element1} and {element2} from their mixture."
    - "From a complex mixture, the {alchemist} extracts {out} by isolating {element1} and {element2}."


conjunction: # z = divide(x, y)
  args: [element1, element2]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    combines: { type: literal, args: [ 'combines', 'unites', 'joins', 'merges', 'fuses', 'blends', 'mixes', 'melds', 'amalgamates', 'integrates', 'incorporates', 'intermixes', 'intermingles', 'interweaves', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits' ]}
    isolated: { type: literal, args: [ 'isolated', 'separated', 'extracted', 'purified', 'cleansed', 'filtered', 'distilled', 'separated', 'extracted', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned', 'refined', 'clarified', 'distilled', 'filtered', 'strained', 'sifted', 'strained', 'cleaned' ]}
    elements: { type: literal, args: [ 'elements', 'substances', 'compounds', 'blends', 'combinations', 'concoctions', 'solutions', 'emulsions', 'tinctures', 'solutions', 'distillations' ]}
    and: {type: literal, args: ['and', 'with', 'along with', 'together with', 'combined with', 'in conjunction with', 'in combination with', 'as well as',]}
    unified: { type: literal, args: [ 'unified', 'merged', 'fused', 'blended', 'mixed', 'melded', 'amalgamated', 'integrated', 'incorporated', 'intermixed', 'intermingled', 'interwove', 'interlaced', 'interconnected', 'interlocked', 'intermeshed', 'interwound', 'interwreathed', 'interknit', 'interlaced', 'interconnected', 'interlocked', 'intermeshed', 'interwound', 'interwreathed', 'interknit' ]}
    whole: { type: literal, args: [ 'whole', 'entirety', 'totality', 'sum', 'aggregate', 'unity', 'oneness', 'singularity', 'wholeness', 'completeness', 'sum', 'aggregate', ]}
    combining: { type: literal, args: [ 'combining', 'uniting', 'joining', 'merging', 'fusing', 'blending', 'mixing', 'melding', 'amalgamating', 'integrating', 'incorporating', 'intermixing', 'intermingling', 'interweaving']}
  templates:
    - "The {alchemist} {combines} the {isolated} {elements} of {element1} {and} {element2} into a new {unified} {whole}, {out}."
    - "{combining} {element1} and {element2}, the {alchemist} forms a new {unified} entity known as {out}."
    - "The {alchemist} merges {element1} and {element2} into {out}, a newly unified {whole}."
    - "A new {whole}, {out}, results from the {alchemist}'s combination of {element1} with {element2}."
    - "{element1} and {element2} are unified by the {alchemist} into a singular {out}."
    - "The fusion of {element1} and {element2} by the {alchemist} results in {out}."
    - "The {alchemist}'s skill combines {element1} and {element2} into a unique {out}."
    - "Through the {alchemist}'s expertise, {element1} and {element2} become the cohesive {out}."
    - "The {alchemist} creates {out} by synthesizing {element1} with {element2} into a cohesive unit."
    - "In the {alchemist}'s hands, {element1} and {element2} merge, forming the complex {out}."


fermentation: # w = (x + 3y) / (z - 4), explodes when Z = 4 so potentially explosive
  args: [essence_x, essence_y, essence_z]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    introduces: { type: literal, args: [ 'introduces', 'adds', 'incorporates', 'injects', 'instills', 'infuses', 'mixes', 'blends', 'combines', 'unites', 'joins', 'merges', 'fuses', 'blends', 'mixes', 'melds', 'amalgamates', 'integrates', 'incorporates', 'intermixes', 'intermingles', 'interweaves', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits', 'interlaces', 'interconnects']}
    mixture: { type: literal, args: [ 'mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'distillation' ]}
    spark: { type: literal, args: [ 'spark', 'ignite', 'trigger', 'activate', 'initiate', 'set off', 'kindle', ]}
    vital: { type: literal, args: [ 'vital', 'essential', 'crucial', 'necessary', 'indispensable', 'important', 'key', 'pivotal', 'fundamental', 'basic', 'primary', 'principal', 'chief', 'main', 'major', 'central', 'cardinal', 'dominant', 'prime', 'paramount', 'preeminent', 'supreme', 'overriding', 'overarching', 'ultimate', 'utmost', 'highest', 'top', 'first', 'foremost', 'leading', 'principal', 'chief', 'main', 'major', 'central', 'cardinal', 'dominant', 'prime', 'paramount', 'preeminent', 'supreme', 'overriding', 'overarching', 'ultimate', 'utmost', 'highest', 'top', 'first', 'foremost', 'leading' ]}
    transformation: { type: literal, args: [ 'transformation', 'change', 'alteration', 'conversion']}
    yielding: { type: literal, args: [ 'yielding', 'producing', 'generating', 'giving', 'creating', 'making', 'manufacturing', 'fabricating', 'fashioning', 'forming']}

  templates:
    - "The {alchemist} {introduces} {essence_x} into a {mixture} of {essence_y} and {essence_z} to {spark} a {vital} {transformation}, {yielding} {out}."
    - "The {alchemist} catalyzes a reaction between {essence_x}, {essence_y}, and {essence_z}, producing {out}."
    - "In the mixture, {essence_x}, {essence_y}, and {essence_z} are combined by the {alchemist} to create {out}."
    - "{essence_x} is introduced into a blend of {essence_y} and {essence_z} by the {alchemist}, resulting in {out}."
    - "The {alchemist} orchestrates a vital transformation by fermenting {essence_x} with {essence_y} and {essence_z}, {yielding} {out}."
    - "A transformation initiated by the {alchemist} with {essence_x}, {essence_y}, and {essence_z} leads to {out}."
    - "By fermenting {essence_x} with {essence_y} and {essence_z}, the {alchemist} brings about {out}."
    - "The {alchemist}'s use of {essence_x}, {essence_y}, and {essence_z} in fermentation procures {out}."
    - "Fermentation by the {alchemist} of {essence_x} with {essence_y} and {essence_z} transforms into {out}."
    - "The {alchemist} sparks a transformation in {essence_x}, {essence_y}, and {essence_z}, ultimately achieving {out}."

# The following are definitions of the arithmetic operations. They are used to get verbalization of modified expressions.
# These modifications happen when we process programs of above functions symbolically using "symbolic_restructure" module.
# These are not in defs.py. And they shouls not be there!

add: # z = add(x, y)
  args: [ingredient1, ingredient2]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    combines: { type: literal, args: [ 'combines', 'unites', 'joins', 'merges', 'fuses', 'blends', 'mixes', 'melds', 'amalgamates', 'integrates', 'incorporates', 'intermixes', 'intermingles', 'interweaves', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits', 'interlaces', 'interconnects']}
    mixture: { type: literal, args: [ 'mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'distillation' ]}
    spark: { type: literal, args: [ 'spark', 'ignite', 'trigger', 'activate', 'initiate', 'set off', 'kindle', ]}
    yielding: { type: literal, args: [ 'yielding', 'producing', 'generating', 'giving', 'creating', 'making', 'manufacturing', 'fabricating', 'fashioning', 'forming']}
    combining: { type: literal, args: [ 'combining', 'uniting', 'joining', 'merging', 'fusing', 'blending', 'mixing', 'melding', 'amalgamating', 'integrating', 'incorporating', 'intermixing', 'intermingling', 'interweaving']}

  templates:
    - "The {alchemist} adds {ingredient1} and {ingredient2} to create a {mixture} that {spark}s a reaction, {yielding} {out}."
#    - "By {combining} {ingredient1} and {ingredient2}, the {alchemist} creates {out} through a {mixture} that {spark}s a reaction."
#    - "A {mixture} of {ingredient1} and {ingredient2} is combined by the {alchemist} to {spark} a reaction, {yielding} {out}."
#    - "The {alchemist} {combines} {ingredient1} with {ingredient2} to create {out} through a {mixture} that {spark}s a reaction."
#    - "By {combining} {ingredient1} with {ingredient2}, the {alchemist} creates {out} through a {mixture} that {spark}s a reaction."
#    - "A {mixture} of {ingredient1} and {ingredient2} is combined by the {alchemist} to {spark} a reaction, {yielding} {out}."
#    - "The {alchemist} {combines} {ingredient1} with {ingredient2} to create {out} through a {mixture} that {spark}s a reaction."
#    - "By {combining} {ingredient1} with {ingredient2}, the {alchemist} creates {out} through a {mixture} that {spark}s a reaction."
#    - "A {mixture} of {ingredient1} and {ingredient2} is combined by the {alchemist} to {spark} a reaction, {yielding} {out}."
#    - "The {alchemist} {combines} {ingredient1} with {ingredient2} to create {out} through a {mixture} that {spark}s a reaction."
#    - "adding {ingredient1} and {ingredient2} results in {out}."  # This is debug verbalization

mul: # z = multiply(x, y)
  args: [ingredient1, ingredient2]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    combines: { type: literal, args: [ 'combines', 'unites', 'joins', 'merges', 'fuses', 'blends', 'mixes', 'melds', 'amalgamates', 'integrates', 'incorporates', 'intermixes', 'intermingles', 'interweaves', 'interlaces', 'interconnects', 'interlocks', 'intermeshes', 'interwinds', 'interwreathes', 'interknits', 'interlaces', 'interconnects']}
    mixture: { type: literal, args: [ 'mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'distillation' ]}
    spark: { type: literal, args: [ 'spark', 'ignite', 'trigger', 'activate', 'initiate', 'set off', 'kindle', ]}
    yielding: { type: literal, args: [ 'yielding', 'producing', 'generating', 'giving', 'creating', 'making', 'manufacturing', 'fabricating', 'fashioning', 'forming']}
    multiplicative: { type: literal, args: [ 'multiplicative', 'explosive', 'expanding', 'amplifying', 'magnifying', 'intensifying', 'boosting']}
    combining: { type: literal, args: [ 'combining', 'uniting', 'joining', 'merging', 'fusing', 'blending', 'mixing', 'melding', 'amalgamating', 'integrating', 'incorporating', 'intermixing', 'intermingling', 'interweaving']}

  templates:
#    - "The {alchemist} {combines} {ingredient1} and {ingredient2} to create a {mixture} that {spark}s a {multiplicative} reaction, {yielding} {out}."
#    - "By {combining} {ingredient1} and {ingredient2}, the {alchemist} creates {out} through a {mixture} that {spark}s {multiplicative} reaction."
    - "multiplying {ingredient1} and {ingredient2} results in {out}."

minus: # z = subtract(x, y)
  args: [ingredient1, ingredient2]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    separates: { type: literal, args: [ 'subtracts', ]}
    mixture: { type: literal, args: [ 'mixture', 'blend', 'combination', 'compound', 'concoction', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'brew', 'distillation', 'solution', 'emulsion', 'tincture', 'elixir', 'potion', 'distillation' ]}
    spark: { type: literal, args: [ 'spark', 'ignite', 'trigger', 'activate', 'initiate', 'set off', 'kindle', ]}
    yielding: { type: literal, args: [ 'yielding', 'producing', 'generating', 'giving', 'creating', 'making', 'manufacturing', 'fabricating', 'fashioning', 'forming']}

  templates:
    - "The {alchemist} {separates} {ingredient2} from {ingredient1} to create a {mixture} that {spark}s a reaction, {yielding} {out}."
#       - "subtracting {ingredient2} from {ingredient1} results in {out}."   # This is debug verbalization

div: # z = divide(x, y)
  args: [ingredient1, ingredient2]

  rules:
    alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
    divides: { type: literal, args: [ 'divides', 'dilutes',]}

  templates:
    - "The {alchemist} {divides} {ingredient1} by {ingredient2} to create {out}."
#    - "dividing {ingredient1} by {ingredient2} results in {out}."   # This is debug verbalization
pow: # Z = a ** b
    args: [ingredient1, ingredient2]

    rules:
        alchemist: { type: literal, args: [ 'alchemist', 'sorcerer', 'wizard', 'magician', 'enchanter', 'warlock', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress', 'witch', 'mage', 'conjurer', 'necromancer', 'thaumaturge', 'sorceress', 'enchantress' ] }
        raises: { type: literal, args: [ 'exponentiates', 'powers']}

    templates:
        - "The {alchemist} {raises} {ingredient1} to the power of {ingredient2} to create {out}."
#        - "raising {ingredient1} to the power of {ingredient2} results in {out}."   # This is debug verbalization